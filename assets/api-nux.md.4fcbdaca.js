import{_ as t,o as e,c as d,U as o}from"./chunks/framework.54105999.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"api-nux.md","filePath":"api-nux.md"}'),a={name:"api-nux.md"},i=o('<h2 id="constants" tabindex="-1">Constants <a class="header-anchor" href="#constants" aria-label="Permalink to &quot;Constants&quot;">​</a></h2><dl><dt><a href="#setLinuxConfig">setLinuxConfig</a> ⇒ <code>Promise.&lt;void&gt;</code></dt><dd><p>Generates a Desktop Entry file for Linux <a href="https://specifications.freedesktop.org/desktop-entry-spec/latest/ar01s06.html">https://specifications.freedesktop.org/desktop-entry-spec/latest/ar01s06.html</a></p></dd></dl><h2 id="typedefs" tabindex="-1">Typedefs <a class="header-anchor" href="#typedefs" aria-label="Permalink to &quot;Typedefs&quot;">​</a></h2><dl><dt><a href="#name">name</a> : <code>object</code></dt><dd><p>Linux configuration options</p></dd></dl><p><a name="setLinuxConfig"></a></p><h2 id="setlinuxconfig-⇒-promise-void" tabindex="-1">setLinuxConfig ⇒ <code>Promise.&lt;void&gt;</code> <a class="header-anchor" href="#setlinuxconfig-⇒-promise-void" aria-label="Permalink to &quot;setLinuxConfig ⇒ &lt;code&gt;Promise.&amp;lt;void&amp;gt;&lt;/code&gt;&quot;">​</a></h2><p>Generates a Desktop Entry file for Linux <a href="https://specifications.freedesktop.org/desktop-entry-spec/latest/ar01s06.html" target="_blank" rel="noreferrer">https://specifications.freedesktop.org/desktop-entry-spec/latest/ar01s06.html</a></p><p><strong>Kind</strong>: global constant</p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>app</td><td><code>LinuxRc</code></td><td>Resource configuration options for Linux</td></tr><tr><td>outDir</td><td><code>string</code></td><td>Directory which stores build artifacts</td></tr></tbody></table><p><a name="name"></a></p><h2 id="name-object" tabindex="-1">name : <code>object</code> <a class="header-anchor" href="#name-object" aria-label="Permalink to &quot;name : &lt;code&gt;object&lt;/code&gt;&quot;">​</a></h2><p>Linux configuration options</p><p><strong>Kind</strong>: global typedef<br><strong>Properties</strong></p><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>genericName</td><td><code>string</code></td><td>Generic name of the application</td></tr><tr><td>noDisplay</td><td><code>boolean</code></td><td>If true the application is not displayed</td></tr><tr><td>comment</td><td><code>string</code></td><td>Tooltip for the entry, for example &quot;View sites on the Internet&quot;.</td></tr><tr><td>icon</td><td><code>string</code></td><td>Icon to display in file manager, menus, etc.</td></tr><tr><td>hidden</td><td><code>boolean</code></td><td>TBD</td></tr><tr><td>onlyShowIn</td><td><code>Array.&lt;string&gt;</code></td><td>A list of strings identifying the desktop environments that should (/not) display a given desktop entry</td></tr><tr><td>notShowIn</td><td><code>Array.&lt;string&gt;</code></td><td>A list of strings identifying the desktop environments that should (/not) display a given desktop entry</td></tr><tr><td>dBusActivatable</td><td><code>boolean</code></td><td>A boolean value specifying if D-Bus activation is supported for this application</td></tr><tr><td>tryExec</td><td><code>string</code></td><td>Path to an executable file on disk used to determine if the program is actually installed</td></tr><tr><td>exec</td><td><code>string</code></td><td>Program to execute, possibly with arguments.</td></tr><tr><td>path</td><td><code>string</code></td><td>If entry is of type Application, the working directory to run the program in.</td></tr><tr><td>terminal</td><td><code>boolean</code></td><td>Whether the program runs in a terminal window.</td></tr><tr><td>actions</td><td><code>Array.&lt;string&gt;</code></td><td>Identifiers for application actions.</td></tr><tr><td>mimeType</td><td><code>Array.&lt;string&gt;</code></td><td>The MIME type(s) supported by this application.</td></tr><tr><td>categories</td><td><code>Array.&lt;string&gt;</code></td><td>Categories in which the entry should be shown in a menu</td></tr><tr><td>implements</td><td><code>Array.&lt;string&gt;</code></td><td>A list of interfaces that this application implements.</td></tr><tr><td>keywords</td><td><code>Array.&lt;string&gt;</code></td><td>A list of strings which may be used in addition to other metadata to describe this entry.</td></tr><tr><td>startupNotify</td><td><code>boolean</code></td><td>If true, it is KNOWN that the application will send a &quot;remove&quot; message when started with the DESKTOP_STARTUP_ID environment variable set. If false, it is KNOWN that the application does not work with startup notification at all.</td></tr><tr><td>startupWMClass</td><td><code>string</code></td><td>If specified, it is known that the application will map at least one window with the given string as its WM class or WM name hin</td></tr><tr><td>prefersNonDefaultGPU</td><td><code>boolean</code></td><td>If true, the application prefers to be run on a more powerful discrete GPU if available.</td></tr><tr><td>singleMainWindow</td><td><code>string</code></td><td>If true, the application has a single main window, and does not support having an additional one opened.</td></tr></tbody></table>',14),r=[i];function n(s,c,p,l,h,f){return e(),d("div",null,r)}const m=t(a,[["render",n]]);export{u as __pageData,m as default};
